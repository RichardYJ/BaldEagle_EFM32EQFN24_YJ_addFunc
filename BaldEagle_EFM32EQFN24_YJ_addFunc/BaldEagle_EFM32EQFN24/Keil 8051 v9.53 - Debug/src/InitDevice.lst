C51 COMPILER V9.53.0.0   INITDEVICE                                                        02/11/2018 17:23:48 PAGE 1   


C51 COMPILER V9.53.0.0, COMPILATION OF MODULE INITDEVICE
OBJECT MODULE PLACED IN .\src\InitDevice.OBJ
COMPILER INVOKED BY: c:\SiliconLabs\SimplicityStudio\v4\developer\toolchains\keil_8051\9.53\BIN\C51.exe D:\WorkSpace\MyC
                    -ode\SYNC\BaldEagle_EFM32EQFN24_YJ_addFunc_bak\BaldEagle_EFM32EQFN24\src\InitDevice.c OMF2 LARGE DEBUG OBJECTEXTEND ROM(L
                    -ARGE) WARNINGLEVEL(2) FLOATFUZZY(3) OPTIMIZE(8,SPEED) DEFINE(DEBUG=1) INTVECTOR(0X0000) INTPROMOTE INCDIR(D:\WorkSpace\M
                    -yCode\SYNC\BaldEagle_EFM32EQFN24_YJ_addFunc_bak\BaldEagle_EFM32EQFN24\inc;C:/SiliconLabs/SimplicityStudio/v4/developer/s
                    -dks/8051/v4.1.1//Device/shared/si8051base;C:/SiliconLabs/SimplicityStudio/v4/developer/sdks/8051/v4.1.1//Device/EFM8LB1/
                    -inc) PRINT(.\src\InitDevice.lst) COND PAGEWIDTH(120) PAGELENGTH(65) OBJECT(.\src\InitDevice.OBJ)

line level    source

   1          //=========================================================
   2          // src/InitDevice.c: generated by Hardware Configurator
   3          //
   4          // This file will be regenerated when saving a document.
   5          // leave the sections inside the "$[...]" comment tags alone
   6          // or they will be overwritten!!
   7          //=========================================================
   8          
   9          // USER INCLUDES
  10          #include <SI_EFM8LB1_Register_Enums.h>
  11          #include "InitDevice.h"
  12          
  13          // USER PROTOTYPES
  14          // USER FUNCTIONS
  15          
  16          // $[Library Includes]
  17          // [Library Includes]$
  18          
  19          //==============================================================================
  20          // enter_DefaultMode_from_RESET
  21          //==============================================================================
  22          extern void enter_DefaultMode_from_RESET(void) {
  23   1              // $[Config Calls]
  24   1              // Save the SFRPAGE
  25   1              uint8_t SFRPAGE_save = SFRPAGE;
  26   1              // Restore the SFRPAGE
  27   1              SFRPAGE = SFRPAGE_save;
  28   1              // [Config Calls]$
  29   1      
  30   1      }
  31          
  32          extern void enter_BusFreeMode_from_RESET(void) {
  33   1              // $[Config Calls]
  34   1              // Save the SFRPAGE
  35   1              uint8_t SFRPAGE_save = SFRPAGE;
  36   1              CLOCK_0_enter_BusFreeMode_from_RESET();
  37   1              // Restore the SFRPAGE
  38   1              SFRPAGE = SFRPAGE_save;
  39   1              // [Config Calls]$
  40   1      
  41   1      }
  42          
  43          extern void enter_DefaultMode_from_BusFreeMode(void) {
  44   1              // $[Config Calls]
  45   1              // Save the SFRPAGE
  46   1              uint8_t SFRPAGE_save = SFRPAGE;
  47   1              WDT_0_enter_DefaultMode_from_BusFreeMode();
  48   1              PORTS_0_enter_DefaultMode_from_BusFreeMode();
  49   1              PORTS_1_enter_DefaultMode_from_BusFreeMode();
  50   1              PBCFG_0_enter_DefaultMode_from_BusFreeMode();
  51   1              ADC_0_enter_DefaultMode_from_BusFreeMode();
C51 COMPILER V9.53.0.0   INITDEVICE                                                        02/11/2018 17:23:48 PAGE 2   

  52   1              CIP51_0_enter_DefaultMode_from_BusFreeMode();
  53   1              CLOCK_0_enter_DefaultMode_from_BusFreeMode();
  54   1              TIMER01_0_enter_DefaultMode_from_BusFreeMode();
  55   1              TIMER16_3_enter_DefaultMode_from_BusFreeMode();
  56   1              TIMER16_4_enter_DefaultMode_from_BusFreeMode();
  57   1              TIMER16_5_enter_DefaultMode_from_BusFreeMode();
  58   1              TIMER_SETUP_0_enter_DefaultMode_from_BusFreeMode();
  59   1              SMBUS_0_enter_DefaultMode_from_BusFreeMode();
  60   1              UARTE_1_enter_DefaultMode_from_BusFreeMode();
  61   1              I2CSLAVE_0_enter_DefaultMode_from_BusFreeMode();
  62   1              INTERRUPT_0_enter_DefaultMode_from_BusFreeMode();
  63   1              // Restore the SFRPAGE
  64   1              SFRPAGE = SFRPAGE_save;
  65   1              // [Config Calls]$
  66   1      
  67   1      }
  68          
  69          extern void CLOCK_0_enter_BusFreeMode_from_RESET(void) {
  70   1              // $[HFOSC1 Setup]
  71   1              // [HFOSC1 Setup]$
  72   1      
  73   1              // $[CLKSEL - Clock Select]
  74   1              /***********************************************************************
  75   1               - Clock derived from the Internal High Frequency Oscillator 0
  76   1               - SYSCLK is equal to selected clock source divided by 1
  77   1               ***********************************************************************/
  78   1              SFRPAGE = 0x00;
  79   1              CLKSEL = CLKSEL_CLKSL__HFOSC0 | CLKSEL_CLKDIV__SYSCLK_DIV_1;
  80   1              while ((CLKSEL & CLKSEL_DIVRDY__BMASK) == CLKSEL_DIVRDY__NOT_READY)
  81   1                      ;
  82   1              // [CLKSEL - Clock Select]$
  83   1      
  84   1      }
  85          
  86          extern void WDT_0_enter_DefaultMode_from_BusFreeMode(void) {
  87   1              // $[WDTCN - Watchdog Timer Control]
  88   1              SFRPAGE = 0x00;
  89   1              //Disable Watchdog with key sequence
  90   1              WDTCN = 0xDE; //First key
  91   1              WDTCN = 0xAD; //Second key
  92   1              // [WDTCN - Watchdog Timer Control]$
  93   1      
  94   1      }
  95          
  96          extern void PORTS_0_enter_DefaultMode_from_BusFreeMode(void) {
  97   1              // $[P0 - Port 0 Pin Latch]
  98   1              // [P0 - Port 0 Pin Latch]$
  99   1      
 100   1              // $[P0MDOUT - Port 0 Output Mode]
 101   1              /***********************************************************************
 102   1               - P0.0 output is open-drain
 103   1               - P0.1 output is push-pull
 104   1               - P0.2 output is open-drain
 105   1               - P0.3 output is open-drain
 106   1               - P0.4 output is open-drain
 107   1               - P0.5 output is open-drain
 108   1               - P0.6 output is open-drain
 109   1               - P0.7 output is open-drain
 110   1               ***********************************************************************/
 111   1              P0MDOUT = P0MDOUT_B0__OPEN_DRAIN | P0MDOUT_B1__PUSH_PULL
 112   1                              | P0MDOUT_B2__OPEN_DRAIN | P0MDOUT_B3__OPEN_DRAIN
 113   1                              | P0MDOUT_B4__OPEN_DRAIN | P0MDOUT_B5__OPEN_DRAIN
 114   1                              | P0MDOUT_B6__OPEN_DRAIN | P0MDOUT_B7__OPEN_DRAIN;
C51 COMPILER V9.53.0.0   INITDEVICE                                                        02/11/2018 17:23:48 PAGE 3   

 115   1              // [P0MDOUT - Port 0 Output Mode]$
 116   1      
 117   1              // $[P0MDIN - Port 0 Input Mode]
 118   1              // [P0MDIN - Port 0 Input Mode]$
 119   1      
 120   1              // $[P0SKIP - Port 0 Skip]
 121   1              /***********************************************************************
 122   1               - P0.0 pin is skipped by the crossbar
 123   1               - P0.1 pin is skipped by the crossbar
 124   1               - P0.2 pin is skipped by the crossbar
 125   1               - P0.3 pin is skipped by the crossbar
 126   1               - P0.4 pin is skipped by the crossbar
 127   1               - P0.5 pin is skipped by the crossbar
 128   1               - P0.6 pin is not skipped by the crossbar
 129   1               - P0.7 pin is not skipped by the crossbar
 130   1               ***********************************************************************/
 131   1              P0SKIP = P0SKIP_B0__SKIPPED | P0SKIP_B1__SKIPPED | P0SKIP_B2__SKIPPED
 132   1                              | P0SKIP_B3__SKIPPED | P0SKIP_B4__SKIPPED | P0SKIP_B5__SKIPPED
 133   1                              | P0SKIP_B6__NOT_SKIPPED | P0SKIP_B7__NOT_SKIPPED;
 134   1              // [P0SKIP - Port 0 Skip]$
 135   1      
 136   1              // $[P0MASK - Port 0 Mask]
 137   1              // [P0MASK - Port 0 Mask]$
 138   1      
 139   1              // $[P0MAT - Port 0 Match]
 140   1              // [P0MAT - Port 0 Match]$
 141   1      
 142   1      }
 143          
 144          extern void PORTS_1_enter_DefaultMode_from_BusFreeMode(void) {
 145   1              // $[P1 - Port 1 Pin Latch]
 146   1              // [P1 - Port 1 Pin Latch]$
 147   1      
 148   1              // $[P1MDOUT - Port 1 Output Mode]
 149   1              /***********************************************************************
 150   1               - P1.0 output is push-pull
 151   1               - P1.1 output is open-drain
 152   1               - P1.2 output is push-pull
 153   1               - P1.3 output is open-drain
 154   1               - P1.4 output is open-drain
 155   1               - P1.5 output is push-pull
 156   1               - P1.6 output is push-pull
 157   1               ***********************************************************************/
 158   1              P1MDOUT = P1MDOUT_B0__PUSH_PULL | P1MDOUT_B1__OPEN_DRAIN
 159   1                              | P1MDOUT_B2__PUSH_PULL | P1MDOUT_B3__OPEN_DRAIN
 160   1                              | P1MDOUT_B4__OPEN_DRAIN | P1MDOUT_B5__PUSH_PULL
 161   1                              | P1MDOUT_B6__PUSH_PULL;
 162   1              // [P1MDOUT - Port 1 Output Mode]$
 163   1      
 164   1              // $[P1MDIN - Port 1 Input Mode]
 165   1              // [P1MDIN - Port 1 Input Mode]$
 166   1      
 167   1              // $[P1SKIP - Port 1 Skip]
 168   1              // [P1SKIP - Port 1 Skip]$
 169   1      
 170   1              // $[P1MASK - Port 1 Mask]
 171   1              // [P1MASK - Port 1 Mask]$
 172   1      
 173   1              // $[P1MAT - Port 1 Match]
 174   1              // [P1MAT - Port 1 Match]$
 175   1      
 176   1      }
 177          
C51 COMPILER V9.53.0.0   INITDEVICE                                                        02/11/2018 17:23:48 PAGE 4   

 178          extern void PBCFG_0_enter_DefaultMode_from_BusFreeMode(void) {
 179   1              // $[XBR2 - Port I/O Crossbar 2]
 180   1              /***********************************************************************
 181   1               - Weak Pullups enabled 
 182   1               - Crossbar enabled
 183   1               - UART1 TX1 RX1 routed to Port pins
 184   1               - UART1 RTS1 unavailable at Port pin
 185   1               - UART1 CTS1 unavailable at Port pin
 186   1               ***********************************************************************/
 187   1              XBR2 = XBR2_WEAKPUD__PULL_UPS_ENABLED | XBR2_XBARE__ENABLED
 188   1                              | XBR2_URT1E__ENABLED | XBR2_URT1RTSE__DISABLED
 189   1                              | XBR2_URT1CTSE__DISABLED;
 190   1              // [XBR2 - Port I/O Crossbar 2]$
 191   1      
 192   1              // $[PRTDRV - Port Drive Strength]
 193   1              // [PRTDRV - Port Drive Strength]$
 194   1      
 195   1              // $[XBR0 - Port I/O Crossbar 0]
 196   1              /***********************************************************************
 197   1               - UART0 I/O unavailable at Port pin
 198   1               - SPI I/O unavailable at Port pins
 199   1               - SMBus 0 I/O routed to Port pins
 200   1               - CP0 unavailable at Port pin
 201   1               - Asynchronous CP0 unavailable at Port pin
 202   1               - CP1 unavailable at Port pin
 203   1               - Asynchronous CP1 unavailable at Port pin
 204   1               - SYSCLK unavailable at Port pin
 205   1               ***********************************************************************/
 206   1              XBR0 = XBR0_URT0E__DISABLED | XBR0_SPI0E__DISABLED | XBR0_SMB0E__ENABLED
 207   1                              | XBR0_CP0E__DISABLED | XBR0_CP0AE__DISABLED | XBR0_CP1E__DISABLED
 208   1                              | XBR0_CP1AE__DISABLED | XBR0_SYSCKE__DISABLED;
 209   1              // [XBR0 - Port I/O Crossbar 0]$
 210   1      
 211   1              // $[XBR1 - Port I/O Crossbar 1]
 212   1              // [XBR1 - Port I/O Crossbar 1]$
 213   1      
 214   1      }
 215          
 216          extern void ADC_0_enter_DefaultMode_from_BusFreeMode(void) {
 217   1              // $[ADC0CN2 - ADC0 Control 2]
 218   1              /***********************************************************************
 219   1               - ADC0 conversion initiated on overflow of Timer 5
 220   1               - The ADC accumulator is over-written with the results of any conversion
 221   1               ***********************************************************************/
 222   1              ADC0CN2 = ADC0CN2_ADCM__TIMER5 | ADC0CN2_PACEN__PAC_DISABLED;
 223   1              // [ADC0CN2 - ADC0 Control 2]$
 224   1      
 225   1              // $[ADC0CN1 - ADC0 Control 1]
 226   1              /***********************************************************************
 227   1               - ADC0 operates in 14-bit mode
 228   1               - Right justified. Shifted right by 3 bits
 229   1               - Perform and Accumulate 32 conversions
 230   1               ***********************************************************************/
 231   1              ADC0CN1 = ADC0CN1_ADBITS__14_BIT | ADC0CN1_ADSJST__RIGHT_SHIFT_3
 232   1                              | ADC0CN1_ADRPT__ACC_32;
 233   1              // [ADC0CN1 - ADC0 Control 1]$
 234   1      
 235   1              // $[ADC0MX - ADC0 Multiplexer Selection]
 236   1              /***********************************************************************
 237   1               - Select ADC0.20
 238   1               ***********************************************************************/
 239   1              ADC0MX = ADC0MX_ADC0MX__TEMP;
 240   1              // [ADC0MX - ADC0 Multiplexer Selection]$
C51 COMPILER V9.53.0.0   INITDEVICE                                                        02/11/2018 17:23:48 PAGE 5   

 241   1      
 242   1              // $[ADC0CF2 - ADC0 Power Control]
 243   1              /***********************************************************************
 244   1               - The ADC0 ground reference is the GND pin
 245   1               - The ADC0 voltage reference is the internal voltage reference
 246   1               - Power Up Delay Time = 0x0C
 247   1               ***********************************************************************/
 248   1              ADC0CF2 = ADC0CF2_GNDSL__GND_PIN | ADC0CF2_REFSL__INTERNAL_VREF
 249   1                              | (0x0C << ADC0CF2_ADPWR__SHIFT);
 250   1              // [ADC0CF2 - ADC0 Power Control]$
 251   1      
 252   1              // $[ADC0CF0 - ADC0 Configuration]
 253   1              /***********************************************************************
 254   1               - ADCCLK = SYSCLK
 255   1               - SAR Clock Divider = 0x05
 256   1               ***********************************************************************/
 257   1              ADC0CF0 = ADC0CF0_ADCLKSEL__SYSCLK | (0x05 << ADC0CF0_ADSC__SHIFT);
 258   1              // [ADC0CF0 - ADC0 Configuration]$
 259   1      
 260   1              // $[ADC0CF1 - ADC0 Configuration]
 261   1              /***********************************************************************
 262   1               - Enable low power mode
 263   1               - Conversion Tracking Time = 0x06
 264   1               ***********************************************************************/
 265   1              ADC0CF1 = ADC0CF1_ADLPM__LP_ENABLED | (0x06 << ADC0CF1_ADTK__SHIFT);
 266   1              // [ADC0CF1 - ADC0 Configuration]$
 267   1      
 268   1              // $[ADC0ASAL - ADC0 Autoscan Start Address Low Byte]
 269   1              // [ADC0ASAL - ADC0 Autoscan Start Address Low Byte]$
 270   1      
 271   1              // $[ADC0GTH - ADC0 Greater-Than High Byte]
 272   1              // [ADC0GTH - ADC0 Greater-Than High Byte]$
 273   1      
 274   1              // $[ADC0GTL - ADC0 Greater-Than Low Byte]
 275   1              // [ADC0GTL - ADC0 Greater-Than Low Byte]$
 276   1      
 277   1              // $[ADC0LTH - ADC0 Less-Than High Byte]
 278   1              // [ADC0LTH - ADC0 Less-Than High Byte]$
 279   1      
 280   1              // $[ADC0LTL - ADC0 Less-Than Low Byte]
 281   1              // [ADC0LTL - ADC0 Less-Than Low Byte]$
 282   1      
 283   1              // $[ADC0ASCF - ADC0 Autoscan Configuration]
 284   1              // [ADC0ASCF - ADC0 Autoscan Configuration]$
 285   1      
 286   1              // $[ADC0CN0 - ADC0 Control 0]
 287   1              /***********************************************************************
 288   1               - Enable ADC0 
 289   1               - Enable the Temperature Sensor
 290   1               - Power down when ADC is idle 
 291   1               ***********************************************************************/
 292   1              ADC0CN0 |= ADC0CN0_ADEN__ENABLED | ADC0CN0_TEMPE__TEMP_ENABLED
 293   1                              | ADC0CN0_IPOEN__POWER_DOWN;
 294   1              // [ADC0CN0 - ADC0 Control 0]$
 295   1      
 296   1      }
 297          
 298          extern void CIP51_0_enter_DefaultMode_from_BusFreeMode(void) {
 299   1              // $[PFE0CN - Prefetch Engine Control]
 300   1              /***********************************************************************
 301   1               - SYSCLK < 75 MHz
 302   1               ***********************************************************************/
 303   1              SFRPAGE = 0x10;
C51 COMPILER V9.53.0.0   INITDEVICE                                                        02/11/2018 17:23:48 PAGE 6   

 304   1              PFE0CN = PFE0CN_FLRT__SYSCLK_BELOW_75_MHZ;
 305   1              // [PFE0CN - Prefetch Engine Control]$
 306   1      
 307   1      }
 308          
 309          extern void CLOCK_0_enter_DefaultMode_from_BusFreeMode(void) {
 310   1              // $[HFOSC1 Setup]
 311   1              // [HFOSC1 Setup]$
 312   1      
 313   1              // $[CLKSEL - Clock Select]
 314   1              /***********************************************************************
 315   1               - Clock derived from the Internal High Frequency Oscillator 1
 316   1               - SYSCLK is equal to selected clock source divided by 1
 317   1               ***********************************************************************/
 318   1              SFRPAGE = 0x00;
 319   1              CLKSEL = CLKSEL_CLKSL__HFOSC1 | CLKSEL_CLKDIV__SYSCLK_DIV_1;
 320   1              while ((CLKSEL & CLKSEL_DIVRDY__BMASK) == CLKSEL_DIVRDY__NOT_READY)
 321   1                      ;
 322   1              // [CLKSEL - Clock Select]$
 323   1      
 324   1      }
 325          
 326          extern void TIMER01_0_enter_DefaultMode_from_BusFreeMode(void) {
 327   1              // $[Timer Initialization]
 328   1              //Save Timer Configuration
 329   1              uint8_t TCON_save;
 330   1              TCON_save = TCON;
 331   1              //Stop Timers
 332   1              TCON &= ~TCON_TR0__BMASK & ~TCON_TR1__BMASK;
 333   1      
 334   1              // [Timer Initialization]$
 335   1      
 336   1              // $[TH0 - Timer 0 High Byte]
 337   1              /***********************************************************************
 338   1               - Timer 0 High Byte = 0x38
 339   1               ***********************************************************************/
 340   1              TH0 = (0x38 << TH0_TH0__SHIFT);
 341   1              // [TH0 - Timer 0 High Byte]$
 342   1      
 343   1              // $[TL0 - Timer 0 Low Byte]
 344   1              /***********************************************************************
 345   1               - Timer 0 Low Byte = 0x13
 346   1               ***********************************************************************/
 347   1              TL0 = (0x13 << TL0_TL0__SHIFT);
 348   1              // [TL0 - Timer 0 Low Byte]$
 349   1      
 350   1              // $[TH1 - Timer 1 High Byte]
 351   1              /***********************************************************************
 352   1               - Timer 1 High Byte = 0xF0
 353   1               ***********************************************************************/
 354   1              TH1 = (0xF0 << TH1_TH1__SHIFT);
 355   1              // [TH1 - Timer 1 High Byte]$
 356   1      
 357   1              // $[TL1 - Timer 1 Low Byte]
 358   1              /***********************************************************************
 359   1               - Timer 1 Low Byte = 0x34
 360   1               ***********************************************************************/
 361   1              TL1 = (0x34 << TL1_TL1__SHIFT);
 362   1              // [TL1 - Timer 1 Low Byte]$
 363   1      
 364   1              // $[Timer Restoration]
 365   1              //Restore Timer Configuration
 366   1              TCON |= (TCON_save & TCON_TR0__BMASK) | (TCON_save & TCON_TR1__BMASK);
C51 COMPILER V9.53.0.0   INITDEVICE                                                        02/11/2018 17:23:48 PAGE 7   

 367   1      
 368   1              // [Timer Restoration]$
 369   1      
 370   1      }
 371          
 372          extern void TIMER16_3_enter_DefaultMode_from_BusFreeMode(void) {
 373   1              // $[Timer Initialization]
 374   1              // Save Timer Configuration
 375   1              uint8_t TMR3CN0_TR3_save;
 376   1              TMR3CN0_TR3_save = TMR3CN0 & TMR3CN0_TR3__BMASK;
 377   1              // Stop Timer
 378   1              TMR3CN0 &= ~(TMR3CN0_TR3__BMASK);
 379   1              // [Timer Initialization]$
 380   1      
 381   1              // $[TMR3CN1 - Timer 3 Control 1]
 382   1              // [TMR3CN1 - Timer 3 Control 1]$
 383   1      
 384   1              // $[TMR3CN0 - Timer 3 Control]
 385   1              // [TMR3CN0 - Timer 3 Control]$
 386   1      
 387   1              // $[TMR3H - Timer 3 High Byte]
 388   1              // [TMR3H - Timer 3 High Byte]$
 389   1      
 390   1              // $[TMR3L - Timer 3 Low Byte]
 391   1              // [TMR3L - Timer 3 Low Byte]$
 392   1      
 393   1              // $[TMR3RLH - Timer 3 Reload High Byte]
 394   1              // [TMR3RLH - Timer 3 Reload High Byte]$
 395   1      
 396   1              // $[TMR3RLL - Timer 3 Reload Low Byte]
 397   1              // [TMR3RLL - Timer 3 Reload Low Byte]$
 398   1      
 399   1              // $[TMR3CN0]
 400   1              /***********************************************************************
 401   1               - Start Timer 3 running
 402   1               ***********************************************************************/
 403   1              TMR3CN0 |= TMR3CN0_TR3__RUN;
 404   1              // [TMR3CN0]$
 405   1      
 406   1              // $[Timer Restoration]
 407   1              // Restore Timer Configuration
 408   1              TMR3CN0 |= TMR3CN0_TR3_save;
 409   1              // [Timer Restoration]$
 410   1      
 411   1      }
 412          
 413          extern void TIMER16_4_enter_DefaultMode_from_BusFreeMode(void) {
 414   1              // $[Timer Initialization]
 415   1              // Save Timer Configuration
 416   1              uint8_t TMR4CN0_TR4_save;
 417   1              SFRPAGE = 0x10;
 418   1              TMR4CN0_TR4_save = TMR4CN0 & TMR4CN0_TR4__BMASK;
 419   1              // Stop Timer
 420   1              TMR4CN0 &= ~(TMR4CN0_TR4__BMASK);
 421   1              // [Timer Initialization]$
 422   1      
 423   1              // $[TMR4CN1 - Timer 4 Control 1]
 424   1              // [TMR4CN1 - Timer 4 Control 1]$
 425   1      
 426   1              // $[TMR4CN0 - Timer 4 Control]
 427   1              // [TMR4CN0 - Timer 4 Control]$
 428   1      
 429   1              // $[TMR4H - Timer 4 High Byte]
C51 COMPILER V9.53.0.0   INITDEVICE                                                        02/11/2018 17:23:48 PAGE 8   

 430   1              // [TMR4H - Timer 4 High Byte]$
 431   1      
 432   1              // $[TMR4L - Timer 4 Low Byte]
 433   1              // [TMR4L - Timer 4 Low Byte]$
 434   1      
 435   1              // $[TMR4RLH - Timer 4 Reload High Byte]
 436   1              // [TMR4RLH - Timer 4 Reload High Byte]$
 437   1      
 438   1              // $[TMR4RLL - Timer 4 Reload Low Byte]
 439   1              // [TMR4RLL - Timer 4 Reload Low Byte]$
 440   1      
 441   1              // $[TMR4CN0]
 442   1              /***********************************************************************
 443   1               - Start Timer 4 running
 444   1               ***********************************************************************/
 445   1              TMR4CN0 |= TMR4CN0_TR4__RUN;
 446   1              // [TMR4CN0]$
 447   1      
 448   1              // $[Timer Restoration]
 449   1              // Restore Timer Configuration
 450   1              TMR4CN0 |= TMR4CN0_TR4_save;
 451   1              // [Timer Restoration]$
 452   1      
 453   1      }
 454          
 455          extern void TIMER16_5_enter_DefaultMode_from_BusFreeMode(void) {
 456   1              // $[Timer Initialization]
 457   1              // Save Timer Configuration
 458   1              uint8_t TMR5CN0_TR5_save;
 459   1              TMR5CN0_TR5_save = TMR5CN0 & TMR5CN0_TR5__BMASK;
 460   1              // Stop Timer
 461   1              TMR5CN0 &= ~(TMR5CN0_TR5__BMASK);
 462   1              // [Timer Initialization]$
 463   1      
 464   1              // $[TMR5CN1 - Timer 5 Control 1]
 465   1              // [TMR5CN1 - Timer 5 Control 1]$
 466   1      
 467   1              // $[TMR5CN0 - Timer 5 Control]
 468   1              // [TMR5CN0 - Timer 5 Control]$
 469   1      
 470   1              // $[TMR5H - Timer 5 High Byte]
 471   1              // [TMR5H - Timer 5 High Byte]$
 472   1      
 473   1              // $[TMR5L - Timer 5 Low Byte]
 474   1              // [TMR5L - Timer 5 Low Byte]$
 475   1      
 476   1              // $[TMR5RLH - Timer 5 Reload High Byte]
 477   1              // [TMR5RLH - Timer 5 Reload High Byte]$
 478   1      
 479   1              // $[TMR5RLL - Timer 5 Reload Low Byte]
 480   1              // [TMR5RLL - Timer 5 Reload Low Byte]$
 481   1      
 482   1              // $[TMR5CN0]
 483   1              /***********************************************************************
 484   1               - Start Timer 5 running
 485   1               ***********************************************************************/
 486   1              TMR5CN0 |= TMR5CN0_TR5__RUN;
 487   1              // [TMR5CN0]$
 488   1      
 489   1              // $[Timer Restoration]
 490   1              // Restore Timer Configuration
 491   1              TMR5CN0 |= TMR5CN0_TR5_save;
 492   1              // [Timer Restoration]$
C51 COMPILER V9.53.0.0   INITDEVICE                                                        02/11/2018 17:23:48 PAGE 9   

 493   1      
 494   1      }
 495          
 496          extern void TIMER_SETUP_0_enter_DefaultMode_from_BusFreeMode(void) {
 497   1              // $[CKCON0 - Clock Control 0]
 498   1              /***********************************************************************
 499   1               - System clock divided by 4
 500   1               - Counter/Timer 0 uses the clock defined by the prescale field, SCA
 501   1               - Timer 2 high byte uses the clock defined by T2XCLK in TMR2CN0
 502   1               - Timer 2 low byte uses the clock defined by T2XCLK in TMR2CN0
 503   1               - Timer 3 high byte uses the clock defined by T3XCLK in TMR3CN0
 504   1               - Timer 3 low byte uses the clock defined by T3XCLK in TMR3CN0
 505   1               - Timer 1 uses the clock defined by the prescale field, SCA
 506   1               ***********************************************************************/
 507   1              SFRPAGE = 0x00;
 508   1              CKCON0 = CKCON0_SCA__SYSCLK_DIV_4 | CKCON0_T0M__PRESCALE
 509   1                              | CKCON0_T2MH__EXTERNAL_CLOCK | CKCON0_T2ML__EXTERNAL_CLOCK
 510   1                              | CKCON0_T3MH__EXTERNAL_CLOCK | CKCON0_T3ML__EXTERNAL_CLOCK
 511   1                              | CKCON0_T1M__PRESCALE;
 512   1              // [CKCON0 - Clock Control 0]$
 513   1      
 514   1              // $[CKCON1 - Clock Control 1]
 515   1              // [CKCON1 - Clock Control 1]$
 516   1      
 517   1              // $[TMOD - Timer 0/1 Mode]
 518   1              /***********************************************************************
 519   1               - Mode 0, 13-bit Counter/Timer
 520   1               - Mode 2, 8-bit Counter/Timer with Auto-Reload
 521   1               - Timer Mode
 522   1               - Timer 0 enabled when TR0 = 1 irrespective of INT0 logic level
 523   1               - Timer Mode
 524   1               - Timer 1 enabled when TR1 = 1 irrespective of INT1 logic level
 525   1               ***********************************************************************/
 526   1              TMOD = TMOD_T0M__MODE0 | TMOD_T1M__MODE2 | TMOD_CT0__TIMER
 527   1                              | TMOD_GATE0__DISABLED | TMOD_CT1__TIMER | TMOD_GATE1__DISABLED;
 528   1              // [TMOD - Timer 0/1 Mode]$
 529   1      
 530   1              // $[TCON - Timer 0/1 Control]
 531   1              /***********************************************************************
 532   1               - Start Timer 1 running
 533   1               ***********************************************************************/
 534   1              TCON |= TCON_TR1__RUN;
 535   1              // [TCON - Timer 0/1 Control]$
 536   1      
 537   1      }
 538          
 539          extern void SMBUS_0_enter_DefaultMode_from_BusFreeMode(void) {
 540   1              // $[SMB0FCN0 - SMBus0 FIFO Control 0]
 541   1              // [SMB0FCN0 - SMBus0 FIFO Control 0]$
 542   1      
 543   1              // $[SMB0RXLN - SMBus0 Receive Length Counter]
 544   1              // [SMB0RXLN - SMBus0 Receive Length Counter]$
 545   1      
 546   1              // $[SMB0ADR - SMBus 0 Slave Address]
 547   1              // [SMB0ADR - SMBus 0 Slave Address]$
 548   1      
 549   1              // $[SMB0ADM - SMBus 0 Slave Address Mask]
 550   1              // [SMB0ADM - SMBus 0 Slave Address Mask]$
 551   1      
 552   1              // $[SMB0TC - SMBus 0 Timing and Pin Control]
 553   1              // [SMB0TC - SMBus 0 Timing and Pin Control]$
 554   1      
 555   1              // $[SMB0CF - SMBus 0 Configuration]
C51 COMPILER V9.53.0.0   INITDEVICE                                                        02/11/2018 17:23:48 PAGE 10  

 556   1              /***********************************************************************
 557   1               - Timer 1 Overflow
 558   1               - Slave states are inhibited
 559   1               - Enable the SMBus module
 560   1               - Enable bus free timeouts
 561   1               - Enable SCL low timeouts if Timer 3 RLFSEL is set appropriately
 562   1               - Enable SDA extended setup and hold times
 563   1               ***********************************************************************/
 564   1              SMB0CF &= ~SMB0CF_SMBCS__FMASK;
 565   1              SMB0CF |= SMB0CF_SMBCS__TIMER1 | SMB0CF_INH__SLAVE_DISABLED
 566   1                              | SMB0CF_ENSMB__ENABLED | SMB0CF_SMBFTE__FREE_TO_ENABLED
 567   1                              | SMB0CF_SMBTOE__SCL_TO_ENABLED | SMB0CF_EXTHOLD__ENABLED;
 568   1              // [SMB0CF - SMBus 0 Configuration]$
 569   1      
 570   1      }
 571          
 572          extern void UARTE_1_enter_DefaultMode_from_BusFreeMode(void) {
 573   1              // $[SBCON1 - UART1 Baud Rate Generator Control]
 574   1              /***********************************************************************
 575   1               - Enable the baud rate generator
 576   1               - Prescaler = 1
 577   1               ***********************************************************************/
 578   1              SFRPAGE = 0x20;
 579   1              SBCON1 = SBCON1_BREN__ENABLED | SBCON1_BPS__DIV_BY_1;
 580   1              // [SBCON1 - UART1 Baud Rate Generator Control]$
 581   1      
 582   1              // $[SMOD1 - UART1 Mode]
 583   1              // [SMOD1 - UART1 Mode]$
 584   1      
 585   1              // $[UART1FCN0 - UART1 FIFO Control 0]
 586   1              // [UART1FCN0 - UART1 FIFO Control 0]$
 587   1      
 588   1              // $[SBRLH1 - UART1 Baud Rate Generator High Byte]
 589   1              /***********************************************************************
 590   1               - UART1 Baud Rate Reload High = 0xFE
 591   1               ***********************************************************************/
 592   1              SBRLH1 = (0xFE << SBRLH1_BRH__SHIFT);
 593   1              // [SBRLH1 - UART1 Baud Rate Generator High Byte]$
 594   1      
 595   1              // $[SBRLL1 - UART1 Baud Rate Generator Low Byte]
 596   1              /***********************************************************************
 597   1               - UART1 Baud Rate Reload Low = 0xC8
 598   1               ***********************************************************************/
 599   1              SBRLL1 = (0xC8 << SBRLL1_BRL__SHIFT);
 600   1              // [SBRLL1 - UART1 Baud Rate Generator Low Byte]$
 601   1      
 602   1              // $[UART1LIN - UART1 LIN Configuration]
 603   1              // [UART1LIN - UART1 LIN Configuration]$
 604   1      
 605   1              // $[SCON1 - UART1 Serial Port Control]
 606   1              /***********************************************************************
 607   1               - UART1 reception enabled
 608   1               ***********************************************************************/
 609   1              SCON1 |= SCON1_REN__RECEIVE_ENABLED;
 610   1              // [SCON1 - UART1 Serial Port Control]$
 611   1      
 612   1              // $[UART1FCN1 - UART1 FIFO Control 1]
 613   1              // [UART1FCN1 - UART1 FIFO Control 1]$
 614   1      
 615   1      }
 616          
 617          extern void I2CSLAVE_0_enter_DefaultMode_from_BusFreeMode(void) {
 618   1              // $[I2C0FCN0 - I2C0 FIFO Control 0]
C51 COMPILER V9.53.0.0   INITDEVICE                                                        02/11/2018 17:23:48 PAGE 11  

 619   1              // [I2C0FCN0 - I2C0 FIFO Control 0]$
 620   1      
 621   1              // $[I2C0SLAD - I2C0 Slave Address]
 622   1              /***********************************************************************
 623   1               - I2C Hardware Slave Address = 0x50
 624   1               ***********************************************************************/
 625   1              I2C0SLAD = (0x50 << I2C0SLAD_I2C0SLAD__SHIFT);
 626   1              // [I2C0SLAD - I2C0 Slave Address]$
 627   1      
 628   1              // $[I2C0ADM - I2C0 Slave Address Mask]
 629   1              // [I2C0ADM - I2C0 Slave Address Mask]$
 630   1      
 631   1              // $[I2C0CN0 - I2C0 Control]
 632   1              /***********************************************************************
 633   1               - Set the I2C0 Slave pins in I2C mode
 634   1               - Data bytes must be written into the TX FIFO via the I2C0DOUT register
 635   1               before the 8th SCL clock of the matching slave address byte transfer
 636   1               arrives for an I2C read operation
 637   1               - Enable I2C SCL low timeout detection using Timer 4 if Timer 4 RLFSEL
 638   1               is set appropriately
 639   1               - Enable the I2C0 Slave module
 640   1               ***********************************************************************/
 641   1              I2C0CN0 &= ~I2C0CN0_PRELOAD__BMASK;
 642   1              I2C0CN0 |= I2C0CN0_PINMD__I2C_MODE | I2C0CN0_TIMEOUT__ENABLED;
 643   1              I2C0CN0 |= I2C0CN0_I2C0EN__ENABLED;
 644   1              // [I2C0CN0 - I2C0 Control]$
 645   1      
 646   1      }
 647          
 648          extern void INTERRUPT_0_enter_DefaultMode_from_BusFreeMode(void) {
 649   1              // $[EIE1 - Extended Interrupt Enable 1]
 650   1              /***********************************************************************
 651   1               - Enable interrupt requests generated by the ADINT flag
 652   1               - Disable ADC0 Window Comparison interrupt
 653   1               - Disable CP0 interrupts
 654   1               - Disable CP1 interrupts
 655   1               - Disable all Port Match interrupts
 656   1               - Disable all PCA0 interrupts
 657   1               - Enable interrupt requests generated by SMB0
 658   1               - Enable interrupt requests generated by the TF3L or TF3H flags
 659   1               ***********************************************************************/
 660   1              SFRPAGE = 0x00;
 661   1              EIE1 = EIE1_EADC0__ENABLED | EIE1_EWADC0__DISABLED | EIE1_ECP0__DISABLED
 662   1                              | EIE1_ECP1__DISABLED | EIE1_EMAT__DISABLED | EIE1_EPCA0__DISABLED
 663   1                              | EIE1_ESMB0__ENABLED | EIE1_ET3__ENABLED;
 664   1              // [EIE1 - Extended Interrupt Enable 1]$
 665   1      
 666   1              // $[EIE2 - Extended Interrupt Enable 2]
 667   1              /***********************************************************************
 668   1               - Disable CL0 interrupts
 669   1               - Enable interrupt requests generated by the I2C0 slave
 670   1               - Enable interrupt requests generated by the TF4L or TF4H flags
 671   1               - Disable Timer 5 interrupts
 672   1               - Disable UART1 interrupts
 673   1               ***********************************************************************/
 674   1              EIE2 = EIE2_CL0__DISABLED | EIE2_EI2C0__ENABLED | EIE2_ET4__ENABLED
 675   1                              | EIE2_ET5__DISABLED | EIE2_ES1__DISABLED;
 676   1              // [EIE2 - Extended Interrupt Enable 2]$
 677   1      
 678   1              // $[EIP1H - Extended Interrupt Priority 1 High]
 679   1              // [EIP1H - Extended Interrupt Priority 1 High]$
 680   1      
 681   1              // $[EIP1 - Extended Interrupt Priority 1 Low]
C51 COMPILER V9.53.0.0   INITDEVICE                                                        02/11/2018 17:23:48 PAGE 12  

 682   1              // [EIP1 - Extended Interrupt Priority 1 Low]$
 683   1      
 684   1              // $[EIP2 - Extended Interrupt Priority 2]
 685   1              // [EIP2 - Extended Interrupt Priority 2]$
 686   1      
 687   1              // $[EIP2H - Extended Interrupt Priority 2 High]
 688   1              // [EIP2H - Extended Interrupt Priority 2 High]$
 689   1      
 690   1              // $[IE - Interrupt Enable]
 691   1              /***********************************************************************
 692   1               - Enable each interrupt according to its individual mask setting
 693   1               - Disable external interrupt 0
 694   1               - Disable external interrupt 1
 695   1               - Disable all SPI0 interrupts
 696   1               - Disable all Timer 0 interrupt
 697   1               - Disable all Timer 1 interrupt
 698   1               - Disable Timer 2 interrupt
 699   1               - Disable UART0 interrupt
 700   1               ***********************************************************************/
 701   1              IE = IE_EA__ENABLED | IE_EX0__DISABLED | IE_EX1__DISABLED
 702   1                              | IE_ESPI0__DISABLED | IE_ET0__DISABLED | IE_ET1__DISABLED
 703   1                              | IE_ET2__DISABLED | IE_ES0__DISABLED;
 704   1              // [IE - Interrupt Enable]$
 705   1      
 706   1              // $[IP - Interrupt Priority]
 707   1              // [IP - Interrupt Priority]$
 708   1      
 709   1              // $[IPH - Interrupt Priority High]
 710   1              // [IPH - Interrupt Priority High]$
 711   1      
 712   1      }
 713          
 714          extern void PORTS_2_enter_DefaultMode_from_BusFreeMode(void) {
 715   1      
 716   1      }
 717          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    295    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----       2
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
